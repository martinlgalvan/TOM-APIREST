//Columns
/*
    router.route('/api/columnas')
    .get(ColumnController.getAllColumns)
    .post(ColumnController.createColumn)
  
  router.route('/api/columnas/:idColumn')
    .patch(ColumnController.editColumn)
    .delete(ColumnController.deleteColumn)

// Cells

// Ruta para crear una celda asociada a un valor de una columna
router.post('/api/columnas/:columnValueId', CellController.createCell);*/



// CONTROLLER ------------------- *

import { ObjectId } from 'mongodb'
import * as ColumnService from '../../services/randomizerColumns.services.js'

// Controlador para obtener todas las columnas
function getAllColumns(req, res) {
    ColumnService.getAllColumns()
        .then((columns) => {
            res.status(200).json(columns);
        })
        .catch((err) => {
            res.status(500).json({ error: err.message });
        });
}


// Controlador para la creación de una columna
function createColumn(req, res) {
    const column = {
        name: req.body.name,
        video: req.body.video
    };

    ColumnService.createColumn(column)
        .then((newColumn) => {
            res.status(201).json(newColumn);
        })
        .catch((err) => {
            res.status(500).json({ error: err.message });
        });
}

// Controlador para editar una columna por su ID
function editColumn(req, res) {
    const columnId = req.params.idColumn;
    const updatedData = req.body.updatedData; // Datos actualizados de la columna

    ColumnService.updateColumn(columnId, updatedData)
        .then((result) => {
            res.status(200).json(result);
        })
        .catch((err) => {
            res.status(500).json({ error: err.message });
        });
}

// Controlador para eliminar una columna por su ID
function deleteColumn(req, res) {
    const columnId = req.params.idColumn;

    ColumnService.deleteColumn(columnId)
        .then((result) => {
            res.status(200).json(result);
        })
        .catch((err) => {
            res.status(500).json({ error: err.message });
        });
}



export {
    getAllColumns,
    createColumn,
    editColumn,
    deleteColumn
}



// CONTROLLER CELL -------------------------**


import { ObjectId } from 'mongodb'
import * as CellService from '../../services/randomizerCells.services.js'

// Controlador para la creación de una celda asociada a un valor de una columna
function createCell(req, res) {
    const columnValueId = req.params.columnValueId;
    const value = req.body.valor;

    CellService.createCell(columnValueId, value)
        .then((newCell) => {
            res.status(201).json(newCell);
        })
        .catch((err) => {
            res.status(500).json({ error: err.message });
        });
}


export {
    createCell
}



// SERVICE COLUMNS ------------------------------*

import { MongoClient, ObjectId } from 'mongodb'

const options = { keepAlive: true };

const client = new MongoClient('mongodb://m4rt1n:s0yM4RT1NG4LV4N@62.72.51.41:27017/',options)
const db = client.db('TOM')
const columns = db.collection('RandomizerColumns')

// Definición del servicio para obtener todas las columnas
async function getAllColumns() {
    return client.connect()
        .then(() => {
            return columns.find({}).toArray();
        })
        .catch((err) => {
            throw new Error(`Error al obtener las columnas: ${err.message}`);
        });
}

// Definición del servicio para crear una columna
async function createColumn(column) {
    const newColumn = {
        name: column.name,
        video: column.video
    };

    return client.connect()
        .then(() => {
            return columns.insertOne(newColumn);
        })
        .then(() => {
            return newColumn;
        });
}

async function updateColumn(columnId, updatedData){
    
    return client.connect()
        .then(function(){
            return columns.updateOne(
                { _id: new ObjectId(columnId)},
                { $set: updatedData }
             )
        })
        .then((result) => {
            if (result.modifiedCount === 0) {
                throw new Error('La columna no fue encontrada o no se realizó ninguna modificación.');
            }
            return { message: 'Columna actualizada exitosamente' };
        })
        .catch((err) => {
            throw new Error(`Error al actualizar la columna: ${err.message}`);
        });
}


// Definición del servicio para eliminar una columna por su ID
async function deleteColumn(columnId) {
    const filter = { _id: new ObjectId(columnId) };

    return client.connect()
        .then(() => {
            return columns.deleteOne(filter);
        })
        .then((result) => {
            if (result.deletedCount === 0) {
                throw new Error('La columna no fue encontrada o no se eliminó.');
            }
            return { message: 'Columna eliminada exitosamente' };
        })
        .catch((err) => {
            throw new Error(`Error al eliminar la columna: ${err.message}`);
        });
}


export {
    getAllColumns,
    createColumn,
    updateColumn,
    deleteColumn
}


//*************************** SERVICE CELLS  */

import { MongoClient, ObjectId } from 'mongodb'

const options = { keepAlive: true };

const client = new MongoClient('mongodb://m4rt1n:s0yM4RT1NG4LV4N@62.72.51.41:27017/',options)
const db = client.db('TOM')
const columns = db.collection('RandomizerCells')

// Definición del servicio para crear una celda asociada a un valor de una columna
async function createCell(columnValueId, value) {
    const newCell = {
        column_value_id: new ObjectId(columnValueId),
        valor: value
    };

    return client.connect()
        .then(() => {
            return cells.insertOne(newCell);
        })
        .then(() => {
            return newCell;
        });
}

export {
    createCell

}


